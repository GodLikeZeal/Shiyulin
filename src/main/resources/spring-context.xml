<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	    xmlns:context="http://www.springframework.org/schema/context" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	    xmlns:aop="http://www.springframework.org/schema/aop" xmlns:jee="http://www.springframework.org/schema/jee"
	    xmlns:tx="http://www.springframework.org/schema/tx" xmlns:cache="http://www.springframework.org/schema/cache"
    	xmlns:util="http://www.springframework.org/schema/util" xmlns:task="http://www.springframework.org/schema/task" xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
	   http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.0.xsd"
	default-lazy-init="true">

	<description>Spring Configuration</description>
	
    <!-- 加载配置属性文件 -->
	<context:property-placeholder ignore-unresolvable="true" location="classpath:config.properties" />

    <util:properties id="APP_PROP" location="classpath:config.properties" local-override="true"/>



	<!-- 使用Annotation自动注册Bean，解决事物失效问题：在主容器中不扫描@Controller注解，在SpringMvc中只扫描@Controller注解。  -->
	<context:component-scan base-package="com.zeal.shiyulin"  ><!-- base-package 如果多个，用“,”分隔 -->
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
	</context:component-scan>

	<!--<context:component-scan base-package="springfox.documentation.swagger.web"/>-->
	<!-- 引用Swagger 默认配置 -->


	<!-- 数据库配置数据源 MyBatis begin -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="typeAliasesPackage" value="com.zeal.shiyulin"/>
		<property name="mapperLocations" value="classpath:/mappings/**/*.xml"/>
		<property name="configLocation" value="classpath:/mybatis-config.xml"></property>
	</bean>



	<!-- 扫描basePackage下所有以@MyBatisDao注解的接口 -->
	<bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<property name="basePackage" value="com.zeal.shiyulin.modules"/>
		<property name="annotationClass" value="com.zeal.shiyulin.common.annotation.MyBatisDao"/>
	</bean>

	<!--&lt;!&ndash; 扫描basePackage下所有以@MyBatisSurveyDao注解的接口  &ndash;&gt;-->
	<!--<bean id="mapperScannerConfigurer2" class="org.mybatis.spring.mapper.MapperScannerConfigurer">-->
		<!--<property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryRegisterSurvey" />-->
		<!--<property name="basePackage" value="com.zeal.realestate.surveymodules"/>-->
		<!--<property name="annotationClass" value="com.gisquest.realestate.common.MyBatisSurveyDao"/>-->
	<!--</bean>-->

	<!-- 原始事务配置 -->

	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" lazy-init="false">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*"  propagation="REQUIRED"/>
			<tx:method name="add*" propagation="REQUIRED"/>
			<tx:method name="del*" propagation="REQUIRED"/>
			<tx:method name="modify*" propagation="REQUIRED"/>
			<tx:method name="update*" propagation="REQUIRED"/>
			<tx:method name="*"  read-only="true" propagation="SUPPORTS" rollback-for="java.lang.Exception"/>
		</tx:attributes>
	</tx:advice>
	<!--启用事务-->
	<!--expose-proxy="true" 解决缓存cacheable内部调用失效-->
	<aop:config >
		<aop:pointcut id="productServiceMethods"
					  expression="execution(* com.zeal.shiyulin.*.*.service..*(..))"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="productServiceMethods"/>
	</aop:config>

	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
		<!-- <constructor-arg index="1" value="BATCH" /> 如果想要进行批量操作可加入这个属性 -->
	</bean>

	<!-- 配置 Annotation 驱动，扫描@Transactional注解的类定义事务     启动基于注解的事物控制 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>


    <!-- 计划任务配置，用 @Service @Lazy(false)标注类，用@Scheduled(cron = "0 0 2 * * ?")标注方法 -->
    <task:executor id="executor" pool-size="10"/> <task:scheduler id="scheduler" pool-size="10"/>
    <task:annotation-driven scheduler="scheduler" executor="executor" proxy-target-class="true"/>
    
	<!--数据源配置, 使用 BoneCP 数据库连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
	    <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
	    <property name="driverClassName" value="${jdbc.driver}" />

		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${jdbc.pool.init}" />
		<property name="minIdle" value="${jdbc.pool.minIdle}" />
		<property name="maxActive" value="${jdbc.pool.maxActive}" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="${jdbc.testSql}" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 配置监控统计拦截的filters -->
	    <property name="filters" value="stat" />
	</bean>

	<!-- 配置redis 单机版 -->
	 <!--redis数据源 -->
	<!--<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">-->
		<!--&lt;!&ndash; 最大空闲数 &ndash;&gt;-->
		<!--<property name="maxIdle" value="${redis.maxIdle}" />-->
		<!--&lt;!&ndash; 最大空闲数 &ndash;&gt;-->
		<!--<property name="maxTotal" value="${redis.maxActive}" />-->
		<!--&lt;!&ndash; 最大等待时间 &ndash;&gt;-->
		<!--<property name="maxWaitMillis" value="${redis.maxWait}" />-->
		<!--&lt;!&ndash; 返回连接时，检测连接是否成功 &ndash;&gt;-->
		<!--<property name="testOnBorrow" value="${redis.testOnBorrow}" />-->

	<!--</bean>-->

	<!--&lt;!&ndash; Spring-redis连接池管理工厂 &ndash;&gt;-->
	<!--<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">-->
		<!--&lt;!&ndash; IP地址 &ndash;&gt;-->
		<!--<property name="hostName" value="${redis.host}" />-->
		<!--&lt;!&ndash; 端口号 &ndash;&gt;-->
		<!--<property name="port" value="${redis.port}" />-->
		<!--&lt;!&ndash; 登录密码 &ndash;&gt;-->
		<!--<property name="password" value="${redis.passwd}"/>-->
		<!--&lt;!&ndash; 超时时间 &ndash;&gt;-->
		<!--<property name="timeout" value="${redis.timeout}" />-->
		<!--<property name="poolConfig" ref="poolConfig" />-->
	<!--</bean>-->

	<!--&lt;!&ndash; redis 集群 &ndash;&gt;-->
	<!--&lt;!&ndash;  <bean id="redisClient" class="redis.clients.jedis.JedisCluster">-->
          <!--<constructor-arg name="nodes">-->
              <!--<bean class="redis.clients.jedis.HostAndPort">-->
                <!--<constructor-arg name="host" value="192.168.113.115"></constructor-arg>-->
                <!--<constructor-arg name="port" value="7002"></constructor-arg>-->
            <!--</bean>-->
            <!--<bean class="redis.clients.jedis.HostAndPort">-->
                <!--<constructor-arg name="host" value="192.168.17.37"></constructor-arg>-->
                <!--<constructor-arg name="port" value="7002"></constructor-arg>-->
            <!--</bean>-->
          <!--</constructor-arg>-->
     <!--</bean>  &ndash;&gt;-->

	<!--&lt;!&ndash; redis模板类，提供了对缓存的增删改查 &ndash;&gt;-->
	<!--<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">-->
		<!--<property name="connectionFactory" ref="jedisConnectionFactory" />-->
		<!--&lt;!&ndash;     如果不配置Serializer，那么存储的时候只能使用String，如果用对象类型存储，那么会提示错误 can't cast to String！！！&ndash;&gt;-->
		<!--<property name="keySerializer">-->
			<!--<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />-->
		<!--</property>-->
		<!--<property name="valueSerializer">-->
			<!--<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />-->
		<!--</property>-->
		<!--&lt;!&ndash;开启事务&ndash;&gt;-->
		<!--<property name="enableTransactionSupport" value="true"/>-->
	<!--</bean>-->

	<!--&lt;!&ndash; StrRedisTemplate &ndash;&gt;-->
	<!--<bean id="strRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">-->
		<!--<property name="connectionFactory" ref="jedisConnectionFactory" />-->
		<!--<property name="keySerializer">-->
			<!--<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />-->
		<!--</property>-->
		<!--<property name="valueSerializer">-->
			<!--<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />-->
		<!--</property>-->
		<!--<property name="hashKeySerializer">-->
			<!--<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />-->
		<!--</property>-->
	<!--</bean>-->

	<!--&lt;!&ndash; 使用中间类解决RedisCache.jedisConnectionFactory的静态注入，从而使MyBatis实现第三方缓存 &ndash;&gt;-->
	<!--<bean id="redisCacheTransfer" class="com.zeal.shiyulin.common.cache.RedisCacheTransfer" lazy-init="false">-->
		<!--<property name="jedisConnectionFactory" ref="jedisConnectionFactory"/>-->
	<!--</bean>-->

	<!--&lt;!&ndash; //End 单机版Redis集成 &ndash;&gt;-->

	<!--&lt;!&ndash; Redis缓存管理对象 &ndash;&gt;-->
	<!--<bean id="redisCacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">-->
		<!--<constructor-arg index="0" ref="redisTemplate" />-->
	<!--</bean>-->

	 <!--spring自己的缓存管理器，用于redis以spring注解的方式来缓存，这里定义了缓存位置名称 ，即注解中的value-->
	<!--<bean id="springCacheManager" class="org.springframework.cache.support.SimpleCacheManager">-->
		<!--<property name="caches">-->
			<!--<set>-->
				<!--&lt;!&ndash; 这里可以配置多个redis &ndash;&gt;-->
				<!--&lt;!&ndash; <bean class="com.zeal.shiyulin.common.cache.ComponentRedisCache">-->
                     <!--<property name="redisTemplate" ref="redisTemplate" />-->
                     <!--<property name="name" value="default"/>-->
                <!--</bean> &ndash;&gt;-->
				<!--<bean class="com.zeal.shiyulin.common.cache.ComponentRedisCache">-->
					<!--<property name="redisTemplate" ref="redisTemplate" />-->
					<!--<property name="name" value="common"/>-->
					<!--&lt;!&ndash; common名称要在类或方法的注解中使用 &ndash;&gt;-->
				<!--</bean>-->
			<!--</set>-->
		<!--</property>-->
	<!--</bean>-->

	<!-- 缓存配置 -->
	<!--启用缓存注解-->
	<cache:annotation-driven cache-manager="ehCacheCacheManager"/>
	<!--<cache:annotation-driven cache-manager="redisCacheManager"/>-->
	<!--<cache:annotation-driven cache-manager="springCacheManager"/>-->


	<!--缓存管理器工厂加载ehcache的配置-->
	<bean id="ehCacheManagerFactory" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:${ehcache.configFile}" />
	</bean>

	<!--声明缓存管理器-->
	<bean id="ehCacheCacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
		<property name="cacheManager" ref="ehCacheManagerFactory"/>
	</bean>

	<!-- 继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的ShiroDbRealm.java -->
    <bean id="myRealm" class="com.zeal.shiyulin.modules.authority.controller.MyRealm">
		<!-- 将凭证匹配器设置到realm中，realm按照凭证匹配器的要求进行散列 -->
		<property name="credentialsMatcher" ref="retryLimitHashedCredentialsMatcher"/>
	</bean>

	<!-- Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session -->
	<!-- 即<property name="sessionMode" value="native"/>,详细说明见官方文档 -->
	<!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="myRealm"/>
	</bean>

	<!--ssl拦截器-->
	<bean id="sslFilter" class="org.apache.shiro.web.filter.authz.SslFilter">
		<property name="port" value="8443"/>
	</bean>

	<!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->
	<!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- Shiro的核心安全接口,这个属性是必须的 -->
		<property name="securityManager" ref="securityManager"/>
		<!-- 要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->
		<!--<property name="loginUrl" value="/login.html"/>-->
		<!-- 登录成功后要跳转的连接(本例中此属性用不到,因为登录成功后的处理逻辑在LoginController里硬编码为main.jsp了) -->
		<!-- <property name="successUrl" value="/system/main"/> -->
		<!-- 用户访问未对其授权的资源时,所显示的连接 -->
		<property name="unauthorizedUrl" value="/"/>
		<!--配置拦截器-->
		<!-- Shiro连接约束配置,即过滤链的定义 -->
		<!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->
		<!-- anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 -->
		<!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->
		<property name="filterChainDefinitions">
			<value>
				/= anon
				/error/** = anon
                /css/** = anon
                /img/** = anon
                /js/** = anon
				/fonts/** = anon
				/user/userLogin = anon
				/favicon.ico = anon
				/logout = logout
                <!--/** = authc-->
                <!--/*.* = authc-->
			</value>
		</property>
	</bean>

	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

	<!-- 缓存管理器 使用Ehcache实现 -->
	<bean id="shirocacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManager" ref="ehCacheManagerFactory" />
	</bean>

    <!-- 凭证匹配器 -->
    <bean id="retryLimitHashedCredentialsMatcher"
          class="com.zeal.shiyulin.modules.authority.controller.RetryLimitHashedCredentialsMatcher">
		<constructor-arg index="0" ref="shirocacheManager"/>
		<property name="hashAlgorithmName" value="md5"/>
		<property name="hashIterations" value="1"/>
		<!--<property name="storedCredentialsHexEncoded" value="true" />-->
    </bean>
    <!-- 开启Shiro的注解(如@RequiresRoles,@RequiresPermissions),需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证 -->
	<!-- 配置以下两个bean即可实现此功能 -->
	<!-- Enable Shiro Annotations for Spring-configured beans. Only run after the lifecycleBeanProcessor has run -->
	<!-- 由于本例中并未使用Shiro注解,故注释掉这两个bean(个人觉得将权限通过注解的方式硬编码在程序中,查看起来不是很方便,没必要使用) -->
	<!--
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>
     -->



</beans>